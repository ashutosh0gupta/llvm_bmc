AArch64 lamport2

{
	int64_t x;
	int64_t y;
	int64_t b1;
	int64_t b2;

	0:X1 = b1;
	0:X2 = b2;
	0:X5 = x;
	0:X6 = y;

	1:X1 = b1;
	1:X2 = b2;
	1:X5 = x;
	1:X6 = y;

}

P0            | P1            ;

LOCK1:        | LOCK2:        ; (* BEGIN OF LOCK() OPERATION *)
LOOP11:       | LOOP21:       ; (* while(1) is unrolled 3 times *)

MOV X0, #1    | MOV X0, #1    ;
STLR X0, [X1] | STLR X0, [X2] ; (* b[thread] = true *)
MOV X0, #1    | MOV X0, #2    ;
STLR X0, [X5] | STLR X0, [X5] ; (* x = thread *)

LDAR X7, [X6] | LDAR X7, [X6] ; (* load y *)
CMP X7, #0    | CMP X7, #0    ;
B.EQ AFT_IF11 | B.EQ AFT_IF21 ; (* if (y == 0) skip the if body *)

(* if-body begin *)
MOV X0, #0    | MOV X0, #0    ;
STLR X0, [X1] | STLR X0, [X2] ; (* b[thread] = false *)
LDAR X7, [X6] | LDAR X7, [X6] ; (* load y *)
CMP X7, #0    | CMP X7, #0    ;
B.NE EXIT1    | B.NE EXIT2    ; (* if y != 0 exit *)
B LOOP12      | B LOOP22      ; (* if y == 0, go to the next loop iteration *)
(* if-body end *)

AFT_IF11:     | AFT_IF21:     ;
MOV X0, #1    | MOV X0, #2    ;
STLR X0, [X6] | STLR X0, [X6] ; (* y = thread *)

LDAR X7, [X5] | LDAR X7, [X5] ; (* load x *)
CMP X7, #1    | CMP X7, #2    ;
B.EQ UNLOCK1  | B.EQ UNLOCK2  ; (* if (x == thread) skip the if body and break (i.e. go to unlock) *)

(* if-body begin *)
MOV X0, #0    | MOV X0, #0    ;
STLR X0, [X1] | STLR X0, [X2] ; (* b[thread] = false *)
(* loop-body begin*)
LDAR X7, [X1] | LDAR X7, [X1] ; (* load b[1] *)
CMP X7, #1    | CMP X7, #1    ;
B.EQ EXIT1    | B.EQ EXIT2    ; (* if (b[1] = true), exit *)
LDAR X7, [X2] | LDAR X7, [X2] ; (* load b[2] *)
CMP X7, #1    | CMP X7, #1    ;
B.EQ EXIT1    | B.EQ EXIT2    ; (* if b[2] = true), exit *)
(* loop-body end *)

LDAR X7, [X6] | LDAR X7, [X6] ; (* load y *)
CMP X7, #1    | CMP X7, #2    ;
B.EQ UNLOCK1  | B.EQ UNLOCK2  ; (* if (y == thread) skip the if body and break (i.e. go to unlock) *)

(* if-body begin *)
LDAR X7, [X6] | LDAR X7, [X6] ; (* load y *)
CMP X7, #0    | CMP X7, #0    ;
B.NE EXIT1    | B.NE EXIT2    ; (* if (y != 0), exit *)
B LOOP12      | B LOOP22      ; (* otherwise, go to the next loop iteration *)
(* if-body end *)
(* if-body end *)

(* First LOCK iteration done *)

LOOP12:       | LOOP22:       ;
MOV X0, #1    | MOV X0, #1    ;
STLR X0, [X1] | STLR X0, [X2] ; (* b[thread] = true *)
MOV X0, #1    | MOV X0, #2    ;
STLR X0, [X5] | STLR X0, [X5] ; (* x = thread *)

LDAR X7, [X6] | LDAR X7, [X6] ; (* load y *)
CMP X7, #0    | CMP X7, #0    ;
B.EQ AFT_IF12 | B.EQ AFT_IF22 ; (* if (y == 0) skip the if body *)

(* if-body begin *)
MOV X0, #0    | MOV X0, #0    ;
STLR X0, [X1] | STLR X0, [X2] ; (* b[thread] = false *)
LDAR X7, [X6] | LDAR X7, [X6] ; (* load y *)
CMP X7, #0    | CMP X7, #0    ;
B.NE EXIT1    | B.NE EXIT2    ; (* if y != 0 exit *)
B LOOP13      | B LOOP23      ; (* if y == 0, go to the next loop iteration *)
(* if-body end *)

AFT_IF12:     | AFT_IF22:     ;
MOV X0, #1    | MOV X0, #2    ;
STLR X0, [X6] | STLR X0, [X6] ; (* y = thread *)

LDAR X7, [X5] | LDAR X7, [X5] ; (* load x *)
CMP X7, #1    | CMP X7, #2    ;
B.EQ UNLOCK1  | B.EQ UNLOCK2  ; (* if (x == thread) skip the if body and break (i.e. go to unlock) *)

(* if-body begin *)
MOV X0, #0    | MOV X0, #0    ;
STLR X0, [X1] | STLR X0, [X2] ; (* b[thread] = false *)
(* loop-body begin*)
LDAR X7, [X1] | LDAR X7, [X1] ; (* load b[1] *)
CMP X7, #1    | CMP X7, #1    ;
B.EQ EXIT1    | B.EQ EXIT2    ; (* if (b[1] = true), exit *)
LDAR X7, [X2] | LDAR X7, [X2] ; (* load b[2] *)
CMP X7, #1    | CMP X7, #1    ;
B.EQ EXIT1    | B.EQ EXIT2    ; (* if b[2] = true), exit *)
(* loop-body end *)

LDAR X7, [X6] | LDAR X7, [X6] ; (* load y *)
CMP X7, #1    | CMP X7, #2    ;
B.EQ UNLOCK1  | B.EQ UNLOCK2  ; (* if (y == thread) skip the if body and break (i.e. go to unlock) *)

(* if-body begin *)
LDAR X7, [X6] | LDAR X7, [X6] ; (* load y *)
CMP X7, #0    | CMP X7, #0    ;
B.NE EXIT1    | B.NE EXIT2    ; (* if (y != 0), exit *)
B LOOP13      | B LOOP23      ; (* otherwise, go to the next loop iteration *)
(* if-body end *)
(* if-body end *)

(* Second LOCK iteration done *)

LOOP13:       | LOOP23:       ;
MOV X0, #1    | MOV X0, #1    ;
STLR X0, [X1] | STLR X0, [X2] ; (* b[thread] = true *)
MOV X0, #1    | MOV X0, #2    ;
STLR X0, [X5] | STLR X0, [X5] ; (* x = thread *)

LDAR X7, [X6] | LDAR X7, [X6] ; (* load y *)
CMP X7, #0    | CMP X7, #0    ;
B.EQ AFT_IF13 | B.EQ AFT_IF23 ; (* if (y == 0) skip the if body *)

(* if-body begin *)
MOV X0, #0    | MOV X0, #0    ;
STLR X0, [X1] | STLR X0, [X2] ; (* b[thread] = false *)
LDAR X7, [X6] | LDAR X7, [X6] ; (* load y *)
CMP X7, #0    | CMP X7, #0    ;
B.NE EXIT1    | B.NE EXIT2    ; (* if y != 0 exit *)
B EXIT1       | B EXIT2       ; (* if y == 0, there is no next iteration *)
(* if-body end *)

AFT_IF13:     | AFT_IF23:     ;
MOV X0, #1    | MOV X0, #2    ;
STLR X0, [X6] | STLR X0, [X6] ; (* y = thread *)

LDAR X7, [X5] | LDAR X7, [X5] ; (* load x *)
CMP X7, #1    | CMP X7, #2    ;
B.EQ UNLOCK1  | B.EQ UNLOCK2  ; (* if (x == thread) skip the if body and break (i.e. go to unlock) *)

(* if-body begin *)
MOV X0, #0    | MOV X0, #0    ;
STLR X0, [X1] | STLR X0, [X2] ; (* b[thread] = false *)
(* loop-body begin*)
LDAR X7, [X1] | LDAR X7, [X1] ; (* load b[1] *)
CMP X7, #1    | CMP X7, #1    ;
B.EQ EXIT1    | B.EQ EXIT2    ; (* if (b[1] = true), exit *)
LDAR X7, [X2] | LDAR X7, [X2] ; (* load b[2] *)
CMP X7, #1    | CMP X7, #1    ;
B.EQ EXIT1    | B.EQ EXIT2    ; (* if b[2] = true), exit *)
(* loop-body end *)

LDAR X7, [X6] | LDAR X7, [X6] ; (* load y *)
CMP X7, #1    | CMP X7, #2    ;
B.EQ UNLOCK1  | B.EQ UNLOCK2  ; (* if (y == thread) skip the if body and break (i.e. go to unlock) *)

(* if-body begin *)
LDAR X7, [X6] | LDAR X7, [X6] ; (* load y *)
CMP X7, #0    | CMP X7, #0    ;
B.NE EXIT1    | B.NE EXIT2    ; (* if (y != 0), exit *)
B EXIT1       | B EXIT2       ; (* otherwise, there is no next iteration *)
(* if-body end *)
(* if-body end *)

(* Third loop iteration done -- STOP *)
B EXIT1       | B EXIT2       ;


UNLOCK1:      | UNLOCK2:      ; (* BEGIN OF UNLOCK() OPERATION *)
MOV X0, #0    | MOV X0, #0    ;
STLR X0, [X6] | STLR X0, [X6] ; (* y = 0 *)
MOV X0, #0    | MOV X0, #0    ;
STLR X0, [X1] | STLR X0, [X2] ; (* b[thread] = false *)

EXIT1:        | EXIT2: ;


exists x = 5
